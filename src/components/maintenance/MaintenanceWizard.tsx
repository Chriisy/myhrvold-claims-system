import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Form } from '@/components/ui/form';
import { toast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { AgreementStep } from './wizard/AgreementStep';
import { EquipmentStep } from './wizard/EquipmentStep';
import { ScheduleStep } from './wizard/ScheduleStep';
import { SummaryStep } from './wizard/SummaryStep';
import { generateMaintenancePDF } from '@/utils/maintenancePdfGenerator';

const maintenanceSchema = z.object({
  // Agreement data
  kunde_navn: z.string().min(1, 'Kundenavn er påkrevd'),
  kunde_adresse: z.string().optional(),
  kontaktperson: z.string().optional(),
  telefon: z.string().optional(),
  epost: z.string().email('Ugyldig e-postadresse').optional().or(z.literal('')),
  start_dato: z.string().min(1, 'Startdato er påkrevd'),
  slutt_dato: z.string().optional(),
  besok_per_ar: z.number().min(1, 'Minst 1 besøk per år').max(12, 'Maksimalt 12 besøk per år'),
  pris_grunnlag: z.number().min(0, 'Pris må være positiv'),
  pris_cpi_justerbar: z.boolean().default(false),
  beskrivelse: z.string().optional(),
  vilkar: z.string().optional(),
  
  // Equipment data
  equipment: z.array(z.object({
    produkt_navn: z.string().min(1, 'Produktnavn er påkrevd'),
    modell: z.string().optional(),
    serienummer: z.string().optional(),
    produsent: z.string().optional(),
    kategori: z.enum(['kjøl', 'frys', 'annet']).optional(),
    lokasjon: z.string().optional(),
    installasjon_dato: z.string().optional(),
    service_intervall_måneder: z.number().min(1).max(60).default(12),
  })).min(1, 'Minst ett utstyr må registreres'),
});

type MaintenanceFormData = z.infer<typeof maintenanceSchema>;

export const MaintenanceWizard: React.FC = () => {
  const [activeTab, setActiveTab] = useState('agreement');
  const [loading, setLoading] = useState(false);

  const form = useForm<MaintenanceFormData>({
    resolver: zodResolver(maintenanceSchema),
    defaultValues: {
      kunde_navn: '',
      kunde_adresse: '',
      kontaktperson: '',
      telefon: '',
      epost: '',
      start_dato: '',
      slutt_dato: '',
      besok_per_ar: 2,
      pris_grunnlag: 0,
      pris_cpi_justerbar: true,
      beskrivelse: '',
      vilkar: '',
      equipment: [{
        produkt_navn: '',
        modell: '',
        serienummer: '',
        produsent: '',
        kategori: 'kjøl',
        lokasjon: '',
        installasjon_dato: '',
        service_intervall_måneder: 12,
      }],
    },
  });

  const onSubmit = async (data: MaintenanceFormData) => {
    setLoading(true);
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        toast({
          title: "Feil",
          description: "Du må være logget inn for å opprette avtaler",
          variant: "destructive"
        });
        return;
      }

      // Create maintenance agreement (avtale_nummer is auto-generated by trigger)
      const agreementData = {
        kunde_navn: data.kunde_navn,
        kunde_adresse: data.kunde_adresse,
        kontaktperson: data.kontaktperson,
        telefon: data.telefon,
        epost: data.epost,
        start_dato: data.start_dato,
        slutt_dato: data.slutt_dato || null,
        besok_per_ar: data.besok_per_ar,
        pris_grunnlag: data.pris_grunnlag,
        pris_cpi_justerbar: data.pris_cpi_justerbar,
        beskrivelse: data.beskrivelse,
        vilkar: data.vilkar,
        created_by: user.id,
      };

      const { data: agreement, error: agreementError } = await supabase
        .from('maintenance_agreements')
        .insert(agreementData as any) // avtale_nummer auto-generated by trigger
        .select()
        .single();

      if (agreementError) {
        console.error('Error creating agreement:', agreementError);
        toast({
          title: "Feil",
          description: "Kunne ikke opprette vedlikeholdsavtale",
          variant: "destructive"
        });
        return;
      }

      // Create equipment records
      const equipmentData = data.equipment.map(eq => ({
        ...eq,
        avtale_id: agreement.id,
        installasjon_dato: eq.installasjon_dato || null,
      }));

      const { error: equipmentError } = await supabase
        .from('equipment')
        .insert(equipmentData);

      if (equipmentError) {
        console.error('Error creating equipment:', equipmentError);
        toast({
          title: "Advarsel",
          description: "Avtale opprettet, men kunne ikke registrere alt utstyr",
          variant: "destructive"
        });
      }

      // Generate scheduled visits
      const startDate = new Date(data.start_dato);
      const visits = [];
      
      for (let i = 0; i < data.besok_per_ar; i++) {
        const visitDate = new Date(startDate);
        visitDate.setMonth(visitDate.getMonth() + (12 / data.besok_per_ar) * i);
        
        visits.push({
          avtale_id: agreement.id,
          planlagt_tid: visitDate.toISOString(),
          beskrivelse: `Rutinebesøk ${i + 1}/${data.besok_per_ar}`,
          visit_type: 'rutine' as const,
        });
      }

      const { error: visitsError } = await supabase
        .from('service_visits')
        .insert(visits);

      if (visitsError) {
        console.error('Error creating visits:', visitsError);
        toast({
          title: "Advarsel", 
          description: "Avtale opprettet, men kunne ikke planlegge alle besøk",
          variant: "destructive"
        });
      }

      // Generate PDF
      try {
        await generateMaintenancePDF({
          agreement: {
            ...agreement,
            equipment: data.equipment,
          }
        });
      } catch (pdfError) {
        console.error('PDF generation failed:', pdfError);
        toast({
          title: "Advarsel",
          description: "Avtale opprettet, men PDF kunne ikke genereres",
          variant: "destructive"
        });
      }

      toast({
        title: "Suksess",
        description: `Vedlikeholdsavtale ${agreement.avtale_nummer} opprettet`,
      });

      // Reset form
      form.reset();
      setActiveTab('agreement');

    } catch (error) {
      console.error('Error in onSubmit:', error);
      toast({
        title: "Feil",
        description: "En uventet feil oppstod",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const tabs = [
    { id: 'agreement', label: 'Avtaledata', component: AgreementStep },
    { id: 'equipment', label: 'Utstyr', component: EquipmentStep },
    { id: 'schedule', label: 'Planlegging', component: ScheduleStep },
    { id: 'summary', label: 'Oppsummering', component: SummaryStep },
  ];

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle>Opprett Vedlikeholdsavtale</CardTitle>
        <CardDescription>
          Følg stegene for å opprette en ny vedlikeholdsavtale med utstyr og serviceplan
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <Tabs value={activeTab} onValueChange={setActiveTab}>
              <TabsList className="grid w-full grid-cols-4">
                {tabs.map((tab) => (
                  <TabsTrigger key={tab.id} value={tab.id}>
                    {tab.label}
                  </TabsTrigger>
                ))}
              </TabsList>

              {tabs.map((tab) => (
                <TabsContent key={tab.id} value={tab.id} className="mt-6">
                  <tab.component form={form} onNext={() => {
                    const currentIndex = tabs.findIndex(t => t.id === activeTab);
                    if (currentIndex < tabs.length - 1) {
                      setActiveTab(tabs[currentIndex + 1].id);
                    }
                  }} />
                </TabsContent>
              ))}

              <div className="flex justify-between mt-6">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => {
                    const currentIndex = tabs.findIndex(t => t.id === activeTab);
                    if (currentIndex > 0) {
                      setActiveTab(tabs[currentIndex - 1].id);
                    }
                  }}
                  disabled={activeTab === 'agreement'}
                >
                  Forrige
                </Button>

                {activeTab === 'summary' ? (
                  <Button type="submit" disabled={loading}>
                    {loading ? 'Oppretter...' : 'Opprett Avtale'}
                  </Button>
                ) : (
                  <Button
                    type="button"
                    onClick={() => {
                      const currentIndex = tabs.findIndex(t => t.id === activeTab);
                      if (currentIndex < tabs.length - 1) {
                        setActiveTab(tabs[currentIndex + 1].id);
                      }
                    }}
                  >
                    Neste
                  </Button>
                )}
              </div>
            </Tabs>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
};