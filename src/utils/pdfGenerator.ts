import jsPDF from 'jspdf';
import QRCode from 'qrcode';

export interface ClaimData {
  id: string;
  claim_number: string;
  status: string;
  customer_name: string;
  customer_contact?: string;
  customer_email?: string;
  customer_phone?: string;
  customer_address?: string;
  product_name: string;
  product_model?: string;
  serial_number?: string;
  purchase_date?: string;
  warranty_period?: string;
  supplier: string;
  issue_description: string;
  detailed_description?: string;
  technician_name: string;
  work_hours?: number;
  hourly_rate?: number;
  travel_hours?: number;
  travel_distance_km?: number;
  vehicle_cost_per_km?: number;
  parts_cost?: number;
  consumables_cost?: number;
  external_services_cost?: number;
  total_cost?: number;
  expected_refund?: number;
  supplier_notes?: string;
  created_date: string;
  custom_line_items?: any[];
}

const translations = {
  no: {
    subject: 'Garantikrav - Krav om refusjon',
    greeting: 'Til',
    intro: 'Vi viser til garantiavtalen mellom våre bedrifter og ønsker herved å fremsette krav om refusjon for utført garantiarbeid.',
    claimInfo: 'Kravinformasjon',
    claimNumber: 'Kravinummer',
    claimDate: 'Kravdato',
    productInfo: 'Produktinformasjon',
    product: 'Produkt',
    model: 'Modell',
    serialNumber: 'Serienummer',
    purchaseDate: 'Kjøpsdato',
    warranty: 'Garantiperiode',
    reportedIssue: 'Registrert feil',
    serviceAction: 'Utført arbeid',
    technician: 'Tekniker',
    costBreakdown: 'Kostnadssammenbrudd',
    laborCosts: 'Arbeidskostnader',
    partsCosts: 'Delekostnader',
    travelCosts: 'Reisekostnader',
    totalCost: 'Totalkostnad',
    refundRequest: 'Refusjonskrav',
    requestedAction: 'Ønsket handling',
    defaultAction: 'Refusjon for defekt komponent under garanti',
    documentation: 'Dokumentasjon',
    docText: 'Alle relevante dokumenter, kvitteringer og bilder er vedlagt dette kravet.',
    resolution: 'Ønsket løsning',
    resolutionText: 'Vi krever full refusjon av kostnadene i henhold til garantiavtalen. Vi ber om svar innen 14 dager.',
    closing: 'Vi ser frem til en rask avklaring av denne saken.',
    regards: 'Med vennlig hilsen',
    companyName: 'MYHRVOLD GRUPPEN',
    footer: 'Dette dokumentet er sendt digitalt og krever ikke underskrift.',
    systemFooter: 'Dette dokumentet ble generert av: Myhrvold Claim System v1.0',
    year: 'år',
    partNumber: 'Delenr',
    description: 'Beskrivelse',
    quantity: 'Antall',
    sparePartsUsed: 'Reservedeler brukt'
  },
  en: {
    subject: 'Warranty Claim - Refund Request',
    greeting: 'To',
    intro: 'We refer to the warranty agreement between our companies and hereby submit a claim for refund of warranty work performed.',
    claimInfo: 'Claim Information',
    claimNumber: 'Claim Number',
    claimDate: 'Claim Date',
    productInfo: 'Product Information',
    product: 'Product',
    model: 'Model',
    serialNumber: 'Serial Number',
    purchaseDate: 'Purchase Date',
    warranty: 'Warranty Period',
    reportedIssue: 'Reported Issue',
    serviceAction: 'Service Action Taken',
    technician: 'Technician',
    costBreakdown: 'Cost Breakdown',
    laborCosts: 'Labor Costs',
    partsCosts: 'Parts Costs',
    travelCosts: 'Travel Costs',
    totalCost: 'Total Cost',
    refundRequest: 'Refund Request',
    requestedAction: 'Requested Action',
    defaultAction: 'Refund for faulty component under warranty',
    documentation: 'Documentation',
    docText: 'All relevant documents, receipts and images are attached to this claim.',
    resolution: 'Requested Resolution',
    resolutionText: 'We request full refund of the costs according to the warranty agreement. We ask for a response within 14 days.',
    closing: 'We look forward to a quick resolution of this matter.',
    regards: 'Best regards',
    companyName: 'MYHRVOLD GRUPPEN',
    footer: 'This document is sent digitally and does not require signature.',
    systemFooter: 'This document was generated by: Myhrvold Claim System v1.0',
    year: 'year',
    partNumber: 'Part Number',
    description: 'Description',
    quantity: 'Quantity',
    sparePartsUsed: 'Spare Parts Used'
  }
};

const formatDate = (dateString: string | null | undefined, language: 'no' | 'en' = 'no') => {
  if (!dateString) return language === 'no' ? 'Ikke oppgitt' : 'Not specified';
  
  const date = new Date(dateString);
  const options: Intl.DateTimeFormatOptions = { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  };
  
  return date.toLocaleDateString(language === 'no' ? 'nb-NO' : 'en-GB', options);
};

const formatCurrency = (amount: number | null | undefined) => {
  if (!amount) return '0,00 kr';
  return new Intl.NumberFormat('nb-NO', {
    style: 'currency',
    currency: 'NOK'
  }).format(amount);
};

// Helper function to split text into multiple lines
const splitTextToLines = (doc: jsPDF, text: string, maxWidth: number) => {
  const words = text.split(' ');
  const lines: string[] = [];
  let currentLine = '';

  words.forEach(word => {
    const testLine = currentLine + (currentLine ? ' ' : '') + word;
    const lineWidth = doc.getTextWidth(testLine);
    
    if (lineWidth <= maxWidth) {
      currentLine = testLine;
    } else {
      if (currentLine) {
        lines.push(currentLine);
        currentLine = word;
      } else {
        lines.push(word);
      }
    }
  });
  
  if (currentLine) {
    lines.push(currentLine);
  }
  
  return lines;
};

export const generateClaimPDF = async (claim: ClaimData, language: 'no' | 'en') => {
  const doc = new jsPDF('p', 'mm', 'a4');
  const t = translations[language];
  let yPosition = 20;

  // Premium header with company logo area and colored background
  doc.setFillColor(30, 41, 59); // slate-800 for premium look
  doc.rect(0, 0, 210, 35, 'F');
  
  // Company name in premium white
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(22);
  doc.setFont('helvetica', 'bold');
  doc.text('MYHRVOLD GRUPPEN', 20, 18);
  
  // Remove subtitle as suggested
  
  // Claim ID in top right corner
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text(`Claim ID: ${claim.claim_number}`, 150, 18);
  doc.setFontSize(9);
  doc.setFont('helvetica', 'normal');
  doc.text(`Generated: ${new Date().toLocaleDateString(language === 'no' ? 'nb-NO' : 'en-GB')}`, 150, 25);

  // Document title with improved styling
  doc.setTextColor(30, 41, 59); // slate-800
  doc.setFontSize(18);
  doc.setFont('helvetica', 'bold');
  yPosition = 50;
  doc.text(`${t.subject} - ${claim.claim_number}`, 105, yPosition, { align: 'center' });
  
  // Add separator line
  doc.setDrawColor(203, 213, 225); // slate-300
  doc.setLineWidth(0.5);
  doc.line(20, yPosition + 5, 190, yPosition + 5);

  yPosition += 18;

  // Contact information for return correspondence
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(100, 100, 100);
  doc.text('Return correspondence to:', 20, yPosition);
  yPosition += 4;
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(30, 41, 59);
  doc.text('Christopher Strøm', 20, yPosition);
  yPosition += 4;
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(100, 100, 100);
  doc.text('Technical Manager', 20, yPosition);
  yPosition += 4;
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(30, 41, 59);
  doc.text('christopher.strom@myhrvold.no', 20, yPosition);
  yPosition += 12;

  // Product Information
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text(t.productInfo, 20, yPosition);
  yPosition += 8;

  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  
  // Product fields with consistent spacing
  const labelWidth = 70; // Fixed width for all labels
  
  doc.setFont('helvetica', 'bold');
  doc.text(`${t.product}:`, 20, yPosition);
  doc.setFont('helvetica', 'normal');
  
  // Handle UBERT brand name in bold
  if (claim.product_name.includes('UBERT')) {
    const parts = claim.product_name.split('UBERT');
    doc.text(parts[0], labelWidth, yPosition);
    const prefixWidth = doc.getTextWidth(parts[0]);
    doc.setFont('helvetica', 'bold');
    doc.text('UBERT', labelWidth + prefixWidth, yPosition);
    const ubertWidth = doc.getTextWidth('UBERT');
    doc.setFont('helvetica', 'normal');
    doc.text(parts[1] || '', labelWidth + prefixWidth + ubertWidth, yPosition);
  } else {
    doc.text(claim.product_name, labelWidth, yPosition);
  }
  yPosition += 5;

  if (claim.product_model) {
    doc.setFont('helvetica', 'bold');
    doc.text(`${t.model}:`, 20, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(claim.product_model, labelWidth, yPosition);
    yPosition += 5;
  }

  if (claim.serial_number) {
    doc.setFont('helvetica', 'bold');
    doc.text(`${t.serialNumber}:`, 20, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(claim.serial_number, labelWidth, yPosition);
    yPosition += 5;
  }

  if (claim.purchase_date) {
    doc.setFont('helvetica', 'bold');
    doc.text(`${t.purchaseDate}:`, 20, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(formatDate(claim.purchase_date, language), labelWidth, yPosition);
    yPosition += 5;
  }

  if (claim.warranty_period) {
    doc.setFont('helvetica', 'bold');
    doc.text(`${t.warranty}:`, 20, yPosition);
    doc.setFont('helvetica', 'normal');
    // Fix the "1year" spacing issue
    let warrantyText = claim.warranty_period;
    if (!warrantyText.includes(' ')) {
      // Add space between number and year (e.g., "1year" -> "1 year")
      warrantyText = warrantyText.replace(/(\d+)(\w+)/, '$1 $2');
    }
    if (!warrantyText.includes(t.year)) {
      warrantyText += ` ${t.year}`;
    }
    doc.text(warrantyText, labelWidth, yPosition);
    yPosition += 5;
  }

  yPosition += 8;

  // Reported Issue
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text(t.reportedIssue, 20, yPosition);
  yPosition += 6;

  doc.setFontSize(10);
  doc.setFont('helvetica', 'bold');
  doc.text(claim.issue_description, 20, yPosition);
  yPosition += 6;

  // Service Action Taken
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text(t.serviceAction, 20, yPosition);
  yPosition += 6;

  if (claim.detailed_description) {
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    // Improve the language for better professionalism
    let improvedDescription = claim.detailed_description;
    if (language === 'en' && claim.detailed_description.includes('Replaced the controller')) {
      improvedDescription = claim.detailed_description
        .replace('Replaced the controller as it was not supplying power to the lower heating element. The unit was not programmed from the factory',
                'The temperature controller failed to supply power to the lower heating element. Investigation revealed the unit had not been properly initialized or configured at delivery. After replacing the controller, the unit operated as expected.');
    }
    
    const maxWidth = 170;
    const lines = splitTextToLines(doc, improvedDescription, maxWidth);
    
    lines.forEach(line => {
      doc.text(line, 20, yPosition);
      yPosition += 4;
    });
    yPosition += 2;
  }

  yPosition += 8;

  // Requested Action section (moved up after work performed)
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text(t.requestedAction, 20, yPosition);
  yPosition += 6;

  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(t.defaultAction, 20, yPosition);
  yPosition += 10;

  // Customer Information
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Customer Information', 20, yPosition);
  yPosition += 6;

  doc.setFontSize(10);
  doc.setFont('helvetica', 'bold');
  const customerLabelWidth = doc.getTextWidth('Customer: ');
  doc.text('Customer: ', 20, yPosition);
  doc.setFont('helvetica', 'normal');
  doc.text(claim.customer_name, 20 + customerLabelWidth, yPosition);
  yPosition += 5;

  if (claim.customer_address) {
    doc.setFont('helvetica', 'bold');
    const addressLabelWidth = doc.getTextWidth('Address: ');
    doc.text('Address: ', 20, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(claim.customer_address, 20 + addressLabelWidth, yPosition);
    yPosition += 5;
  }

  yPosition += 6;

  // Work Performed
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Work Performed', 20, yPosition);
  yPosition += 6;

  doc.setFontSize(10);
  doc.setFont('helvetica', 'bold');
  const technicianLabelWidth = doc.getTextWidth(`${t.technician}: `);
  doc.text(`${t.technician}: `, 20, yPosition);
  doc.setFont('helvetica', 'normal');
  doc.text(claim.technician_name, 20 + technicianLabelWidth, yPosition);
  yPosition += 5;

  // Spare parts details (without prices)
  const customLineItems = claim.custom_line_items ? 
    (Array.isArray(claim.custom_line_items) ? claim.custom_line_items : 
     (typeof claim.custom_line_items === 'string' ? JSON.parse(claim.custom_line_items) : [])) : [];
  
  if (customLineItems.length > 0) {
    yPosition += 3;
    doc.setFont('helvetica', 'bold');
    doc.text(`${t.sparePartsUsed}:`, 20, yPosition);
    yPosition += 6;
    
    customLineItems.forEach((item: any, index: number) => {
      // Bullet point style for spare parts
      doc.setFont('helvetica', 'normal');
      doc.text('•', 25, yPosition);
      doc.text(`${t.partNumber}: ${item.partNumber || 'N/A'}`, 30, yPosition);
      yPosition += 4;
      
      doc.text('•', 25, yPosition);
      doc.text(`${t.description}: ${item.description || 'N/A'}`, 30, yPosition);  
      yPosition += 4;
      
      doc.text('•', 25, yPosition);
      doc.text(`${t.quantity}: ${item.quantity || 1}`, 30, yPosition);
      yPosition += 6; // Extra space between parts
    });
    
    yPosition += 3;
  }

  yPosition += 15;

  // Remove duplicate Requested Action section

  // Footer with system information
  doc.setFontSize(9);
  doc.setTextColor(128, 128, 128);
  doc.text('This PDF was generated automatically from our warranty claim system.', 20, yPosition);
  yPosition += 4;
  doc.text(`Claim Number: ${claim.claim_number}`, 20, yPosition);
  yPosition += 4;
  doc.text(`Generated: ${formatDate(new Date().toISOString(), language)}`, 20, yPosition);
  yPosition += 6;
  
  // System footer
  doc.setFontSize(8);
  doc.setTextColor(100, 100, 100);
  doc.text(t.systemFooter, 20, yPosition);

  // Generate QR code for claim follow-up in bottom right corner
  try {
    // Create URL for claim follow-up (adjust this URL to match your actual claim details route)
    const followUpUrl = `${window.location.origin}/claims/${claim.id}`;
    
    // Generate QR code as data URL
    const qrCodeDataUrl = await QRCode.toDataURL(followUpUrl, {
      width: 200,
      margin: 1,
      color: {
        dark: '#1e293b', // slate-800
        light: '#ffffff'
      }
    });

    // Add QR code in bottom right corner
    const qrSize = 25; // Size in mm
    const pageWidth = 210; // A4 width in mm
    const pageHeight = 297; // A4 height in mm
    const qrX = pageWidth - qrSize - 15; // 15mm from right edge
    const qrY = pageHeight - qrSize - 15; // 15mm from bottom edge

    doc.addImage(qrCodeDataUrl, 'PNG', qrX, qrY, qrSize, qrSize);

    // Add QR code label
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);
    const labelText = language === 'no' ? 'Scan for oppfølging' : 'Scan for follow-up';
    const labelWidth = doc.getTextWidth(labelText);
    doc.text(labelText, qrX + (qrSize - labelWidth) / 2, qrY + qrSize + 4);
  } catch (error) {
    console.error('Failed to generate QR code:', error);
  }

  // Save the PDF
  const filename = language === 'no' 
    ? `garantikrav_${claim.claim_number}_NO.pdf`
    : `warranty_claim_${claim.claim_number}_EN.pdf`;
  doc.save(filename);
};