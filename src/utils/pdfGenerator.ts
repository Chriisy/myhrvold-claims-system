import jsPDF from 'jspdf';
import QRCode from 'qrcode';

export interface ClaimData {
  id: string;
  claim_number: string;
  status: string;
  customer_name: string;
  customer_contact?: string;
  customer_email?: string;
  customer_phone?: string;
  customer_address?: string;
  product_name: string;
  product_model?: string;
  serial_number?: string;
  purchase_date?: string;
  warranty_period?: string;
  supplier: string;
  issue_description: string;
  detailed_description?: string;
  technician_name: string;
  work_hours?: number;
  hourly_rate?: number;
  travel_hours?: number;
  travel_distance_km?: number;
  vehicle_cost_per_km?: number;
  parts_cost?: number;
  consumables_cost?: number;
  external_services_cost?: number;
  total_cost?: number;
  expected_refund?: number;
  supplier_notes?: string;
  created_date: string;
  custom_line_items?: any[];
  po_reference?: string; // Added PO field
}

const translations = {
  no: {
    subject: 'Garantikrav - Krav om refusjon',
    greeting: 'Til',
    intro: 'Vi viser til garantiavtalen mellom våre bedrifter og ønsker herved å fremsette krav om refusjon for utført garantiarbeid.',
    claimInfo: 'Kravinformasjon',
    claimNumber: 'Kravinummer',
    claimDate: 'Kravdato',
    productInfo: 'Produktinformasjon',
    product: 'Produkt',
    model: 'Modell',
    serialNumber: 'Serienummer',
    purchaseDate: 'Kjøpsdato',
    warranty: 'Garantiperiode',
    reportedIssue: 'Registrert feil',
    serviceAction: 'Utført arbeid',
    technician: 'Tekniker',
    costBreakdown: 'Kostnadssammenbrudd',
    laborCosts: 'Arbeidskostnader',
    partsCosts: 'Delekostnader',
    travelCosts: 'Reisekostnader',
    totalCost: 'Totalkostnad',
    refundRequest: 'Refusjonskrav',
    requestedAction: 'Ønsket handling',
    defaultAction: 'Refusjon for defekt komponent under garanti',
    documentation: 'Dokumentasjon',
    docText: 'Alle relevante dokumenter, kvitteringer og bilder er vedlagt dette kravet.',
    resolution: 'Ønsket løsning',
    resolutionText: 'Vi krever full refusjon av kostnadene i henhold til garantiavtalen. Vi ber om svar innen 14 dager.',
    closing: 'Vi ser frem til en rask avklaring av denne saken.',
    regards: 'Med vennlig hilsen',
    companyName: 'MYHRVOLD GRUPPEN',
    footer: 'Dette dokumentet er sendt digitalt og krever ikke underskrift.',
    systemFooter: 'Dette dokumentet ble generert av: Myhrvold Claim System v1.0',
    year: 'år',
    partNumber: 'Delenr',
    description: 'Beskrivelse',
    quantity: 'Antall',
    sparePartsUsed: 'Reservedeler brukt',
    poReference: 'PO / Bestillingsreferanse'
  },
  en: {
    subject: 'Warranty Claim - Refund Request',
    greeting: 'To',
    intro: 'We refer to the warranty agreement between our companies and hereby submit a claim for refund of warranty work performed.',
    claimInfo: 'Claim Information',
    claimNumber: 'Claim Number',
    claimDate: 'Claim Date',
    productInfo: 'Product Information',
    product: 'Product',
    model: 'Model',
    serialNumber: 'Serial Number',
    purchaseDate: 'Purchase Date',
    warranty: 'Warranty Period',
    reportedIssue: 'Reported Issue',
    serviceAction: 'Service Action Taken',
    technician: 'Technician',
    costBreakdown: 'Cost Breakdown',
    laborCosts: 'Labor Costs',
    partsCosts: 'Parts Costs',
    travelCosts: 'Travel Costs',
    totalCost: 'Total Cost',
    refundRequest: 'Refund Request',
    requestedAction: 'Requested Action',
    defaultAction: 'Refund for faulty component under warranty',
    documentation: 'Documentation',
    docText: 'All relevant documents, receipts and images are attached to this claim.',
    resolution: 'Requested Resolution',
    resolutionText: 'We request full refund of the costs according to the warranty agreement. We ask for a response within 14 days.',
    closing: 'We look forward to a quick resolution of this matter.',
    regards: 'Best regards',
    companyName: 'MYHRVOLD GRUPPEN',
    footer: 'This document is sent digitally and does not require signature.',
    systemFooter: 'This document was generated by: Myhrvold Claim System v1.0',
    year: 'year',
    partNumber: 'Part Number',
    description: 'Description',
    quantity: 'Quantity',
    sparePartsUsed: 'Spare Parts Used',
    poReference: 'PO / Purchase Order Reference'
  }
};

const formatDate = (dateString: string | null | undefined, language: 'no' | 'en' = 'no') => {
  if (!dateString) return language === 'no' ? 'Ikke oppgitt' : 'Not specified';
  
  const date = new Date(dateString);
  const options: Intl.DateTimeFormatOptions = { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  };
  
  return date.toLocaleDateString(language === 'no' ? 'nb-NO' : 'en-GB', options);
};

const formatCurrency = (amount: number | null | undefined) => {
  if (!amount) return '0,00 kr';
  return new Intl.NumberFormat('nb-NO', {
    style: 'currency',
    currency: 'NOK'
  }).format(amount);
};

// Helper function to split text into multiple lines
const splitTextToLines = (doc: jsPDF, text: string, maxWidth: number) => {
  const words = text.split(' ');
  const lines: string[] = [];
  let currentLine = '';

  words.forEach(word => {
    const testLine = currentLine + (currentLine ? ' ' : '') + word;
    const lineWidth = doc.getTextWidth(testLine);
    
    if (lineWidth <= maxWidth) {
      currentLine = testLine;
    } else {
      if (currentLine) {
        lines.push(currentLine);
        currentLine = word;
      } else {
        lines.push(word);
      }
    }
  });
  
  if (currentLine) {
    lines.push(currentLine);
  }
  
  return lines;
};

export const generateClaimPDF = async (claim: ClaimData, language: 'no' | 'en') => {
  const doc = new jsPDF('p', 'mm', 'a4');
  const t = translations[language];
  let yPosition = 15;

  // Clean header with company branding
  doc.setFillColor(52, 73, 94); // Professional dark blue
  doc.rect(0, 0, 210, 28, 'F');
  
  // Company name
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('MYHRVOLD GRUPPEN', 20, 17);
  
  // Claim ID section - more prominent
  doc.setFillColor(236, 240, 241); // Light gray background
  doc.rect(130, 5, 75, 18, 'F');
  doc.setDrawColor(149, 165, 166);
  doc.setLineWidth(0.3);
  doc.rect(130, 5, 75, 18, 'S');
  
  doc.setTextColor(44, 62, 80);
  doc.setFontSize(10);
  doc.setFont('helvetica', 'bold');
  doc.text('Claim ID / Reklamasjonssak ID', 133, 12);
  doc.setFontSize(14);
  doc.text(claim.claim_number, 133, 18);
  doc.setFontSize(8);
  doc.setFont('helvetica', 'normal');
  doc.text(`Generated: ${new Date().toLocaleDateString(language === 'no' ? 'nb-NO' : 'en-GB')}`, 133, 21);

  // Document title - more compact
  doc.setTextColor(44, 62, 80);
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  yPosition = 38;
  doc.text(t.subject, 105, yPosition, { align: 'center' });
  
  // Subtle separator
  doc.setDrawColor(189, 195, 199);
  doc.setLineWidth(0.3);
  doc.line(20, yPosition + 3, 190, yPosition + 3);

  yPosition += 10;

  // Contact information - more compact
  doc.setFontSize(9);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(127, 140, 141);
  doc.text('Return correspondence to:', 20, yPosition);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(44, 62, 80);
  doc.text('Christopher Strøm', 90, yPosition);
  doc.setFont('helvetica', 'normal');
  doc.text('| Technical Manager | christopher.strom@myhrvold.no', 135, yPosition);
  yPosition += 8;

  // Product Information section with box styling
  doc.setFillColor(248, 249, 250);
  doc.rect(15, yPosition - 2, 180, 45, 'F');
  doc.setDrawColor(189, 195, 199);
  doc.setLineWidth(0.3);
  doc.rect(15, yPosition - 2, 180, 45, 'S');
  
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(44, 62, 80);
  doc.text(t.productInfo, 20, yPosition + 3);
  yPosition += 8;

  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  
  const labelWidth = 65;
  
  doc.setFont('helvetica', 'bold');
  doc.text(`${t.product}:`, 20, yPosition);
  doc.setFont('helvetica', 'normal');
  
  // Handle UBERT brand name in bold
  if (claim.product_name.includes('UBERT')) {
    const parts = claim.product_name.split('UBERT');
    doc.text(parts[0], labelWidth, yPosition);
    const prefixWidth = doc.getTextWidth(parts[0]);
    doc.setFont('helvetica', 'bold');
    doc.text('UBERT', labelWidth + prefixWidth, yPosition);
    const ubertWidth = doc.getTextWidth('UBERT');
    doc.setFont('helvetica', 'normal');
    doc.text(parts[1] || '', labelWidth + prefixWidth + ubertWidth, yPosition);
  } else {
    doc.text(claim.product_name, labelWidth, yPosition);
  }
  yPosition += 4;

  if (claim.product_model) {
    doc.setFont('helvetica', 'bold');
    doc.text(`${t.model}:`, 20, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(claim.product_model, labelWidth, yPosition);
    yPosition += 4;
  }

  if (claim.serial_number) {
    doc.setFont('helvetica', 'bold');
    doc.text(`${t.serialNumber}:`, 20, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(claim.serial_number, labelWidth, yPosition);
    yPosition += 4;
  }

  if (claim.purchase_date) {
    doc.setFont('helvetica', 'bold');
    doc.text(`${t.purchaseDate}:`, 20, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(formatDate(claim.purchase_date, language), labelWidth, yPosition);
    yPosition += 4;
  }

  if (claim.warranty_period) {
    doc.setFont('helvetica', 'bold');
    doc.text(`${t.warranty}:`, 20, yPosition);
    doc.setFont('helvetica', 'normal');
    let warrantyText = claim.warranty_period;
    if (!warrantyText.includes(' ')) {
      warrantyText = warrantyText.replace(/(\d+)(\w+)/, '$1 $2');
    }
    if (!warrantyText.includes(t.year)) {
      warrantyText += ` ${t.year}`;
    }
    doc.text(warrantyText, labelWidth, yPosition);
    yPosition += 4;
  }
  
  // Add PO Reference field
  if (claim.po_reference) {
    doc.setFont('helvetica', 'bold');
    doc.text(`${t.poReference}:`, 20, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(claim.po_reference, labelWidth, yPosition);
    yPosition += 4;
  }

  yPosition += 8;

  // Issue and Service section with box styling
  doc.setFillColor(253, 246, 227);
  const issueBoxHeight = 35;
  doc.rect(15, yPosition - 2, 180, issueBoxHeight, 'F');
  doc.setDrawColor(189, 195, 199);
  doc.setLineWidth(0.3);
  doc.rect(15, yPosition - 2, 180, issueBoxHeight, 'S');

  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(44, 62, 80);
  doc.text(t.reportedIssue, 20, yPosition + 3);
  yPosition += 8;

  doc.setFontSize(10);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(176, 58, 46);
  doc.text(claim.issue_description, 20, yPosition);
  yPosition += 10;

  doc.setFontSize(11);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(44, 62, 80);
  doc.text(t.serviceAction, 20, yPosition);
  yPosition += 5;

  if (claim.detailed_description) {
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(85, 85, 85);
    
    let cleanDescription = claim.detailed_description
      .replace(/\s+/g, ' ')
      .trim();
    
    if (language === 'en') {
      cleanDescription = cleanDescription
        .replace('Replaced the controller as it was not supplying power to the lower heating element. The unit was not programmed from the factory',
                'The temperature controller failed to supply power to the lower heating element. Investigation revealed the unit had not been properly initialized or configured at delivery. After replacing the controller, the unit operated as expected.');
    }
    
    const maxWidth = 170;
    const lines = splitTextToLines(doc, cleanDescription, maxWidth);
    
    lines.forEach(line => {
      doc.text(line, 20, yPosition);
      yPosition += 3.5;
    });
  }

  yPosition += 8;

  // Customer & Work Performed section - grouped together
  doc.setFillColor(240, 248, 255);
  const customerWorkBoxHeight = 30;
  doc.rect(15, yPosition - 2, 180, customerWorkBoxHeight, 'F');
  doc.setDrawColor(189, 195, 199);
  doc.setLineWidth(0.3);
  doc.rect(15, yPosition - 2, 180, customerWorkBoxHeight, 'S');

  // Two column layout
  doc.setFontSize(11);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(44, 62, 80);
  doc.text('Customer Information', 20, yPosition + 3);
  doc.text('Work Performed', 110, yPosition + 3);
  yPosition += 8;

  // Customer info column
  doc.setFontSize(9);
  doc.setFont('helvetica', 'bold');
  doc.text('Customer:', 20, yPosition);
  doc.setFont('helvetica', 'normal');
  doc.text(claim.customer_name, 20, yPosition + 3);
  
  if (claim.customer_address) {
    doc.setFont('helvetica', 'bold');
    doc.text('Address:', 20, yPosition + 7);
    doc.setFont('helvetica', 'normal');
    doc.text(claim.customer_address, 20, yPosition + 10);
  }

  // Work performed column
  doc.setFont('helvetica', 'bold');
  doc.text(`${t.technician}:`, 110, yPosition);
  doc.setFont('helvetica', 'normal');
  doc.text(claim.technician_name, 110, yPosition + 3);

  yPosition += 20;

  // Spare parts section with cleaner formatting
  const customLineItems = claim.custom_line_items ? 
    (Array.isArray(claim.custom_line_items) ? claim.custom_line_items : 
     (typeof claim.custom_line_items === 'string' ? JSON.parse(claim.custom_line_items) : [])) : [];
  
  if (customLineItems.length > 0) {
    doc.setFillColor(245, 245, 245);
    const partsBoxHeight = Math.max(20, customLineItems.length * 10 + 8);
    doc.rect(15, yPosition - 2, 180, partsBoxHeight, 'F');
    doc.setDrawColor(189, 195, 199);
    doc.setLineWidth(0.3);
    doc.rect(15, yPosition - 2, 180, partsBoxHeight, 'S');
    
    doc.setFontSize(11);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(44, 62, 80);
    doc.text(`${t.sparePartsUsed}:`, 20, yPosition + 3);
    yPosition += 8;
    
    customLineItems.forEach((item: any, index: number) => {
      doc.setFontSize(9);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(85, 85, 85);
      doc.text(`• ${t.partNumber}: ${item.partNumber || 'N/A'}`, 22, yPosition);
      doc.text(`${t.description}: ${item.description || 'N/A'}`, 45, yPosition);
      doc.text(`${t.quantity}: ${item.quantity || 1}`, 160, yPosition);
      yPosition += 4;
    });
    
    yPosition += 5;
  }

  // Requested Action section
  doc.setFontSize(11);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(44, 62, 80);
  doc.text(t.requestedAction, 20, yPosition);
  yPosition += 5;

  doc.setFontSize(9);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(85, 85, 85);
  doc.text(t.defaultAction, 20, yPosition);
  yPosition += 10;

  // Clean, minimal footer
  yPosition += 10;
  doc.setDrawColor(189, 195, 199);
  doc.setLineWidth(0.3);
  doc.line(20, yPosition, 190, yPosition);
  yPosition += 5;
  
  doc.setFontSize(8);
  doc.setTextColor(127, 140, 141);
  doc.text(`This document was generated automatically on ${formatDate(new Date().toISOString(), language)}`, 20, yPosition);

  // Optional QR code (smaller and cleaner)
  try {
    const followUpUrl = `${window.location.origin}/claims/${claim.id}`;
    const qrCodeDataUrl = await QRCode.toDataURL(followUpUrl, {
      width: 150,
      margin: 1,
      color: {
        dark: '#2c3e50',
        light: '#ffffff'
      }
    });

    const qrSize = 20;
    const pageWidth = 210;
    const pageHeight = 297;
    const qrX = pageWidth - qrSize - 20;
    const qrY = pageHeight - qrSize - 20;

    doc.addImage(qrCodeDataUrl, 'PNG', qrX, qrY, qrSize, qrSize);

    doc.setFontSize(7);
    doc.setTextColor(127, 140, 141);
    const labelText = language === 'no' ? 'Scan for follow-up' : 'Scan for follow-up';
    const labelWidth = doc.getTextWidth(labelText);
    doc.text(labelText, qrX + (qrSize - labelWidth) / 2, qrY + qrSize + 3);
  } catch (error) {
    console.error('Failed to generate QR code:', error);
  }

  // Save the PDF
  const filename = language === 'no' 
    ? `garantikrav_${claim.claim_number}_NO.pdf`
    : `warranty_claim_${claim.claim_number}_EN.pdf`;
  doc.save(filename);
};